version: "3.8"

services:

  order-service:
    image: adrielmachado0111/order-service:latest
    container_name: order-service
    ports:
      - "8081:8085"  # mapeado externo diferente
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:19092
      - INVENTORY_SERVICE_URL=http://inventory-service:8085
      - APP_NAME=Restaurant Order Service
      - APP_VERSION=0.1.1
      - APP_DESCRIPTION=API for managing restaurant orders
      - DEBUG=True
      - DB_ECHO=True
      - KAFKA_ORDER_TOPIC=restaurant.orders
      - KAFKA_CLIENT_ID=order-service
      - KAFKA_GROUP_ID=order-service-group
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080,http://localhost:9091,http://localhost:9090
      - API_PREFIX=/api/v1
      - SERVICE_TIMEOUT=50
    depends_on:
      - inventory-service
      - kafka1
    networks:
      - backend-network

  inventory-service:
    image: adrielmachado0111/inventory-service:latest
    container_name: inventory-service
    ports:
      - "8082:8085"
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:19092
      - APP_NAME=Restaurant Inventory Service
      - APP_VERSION=0.1.1
      - APP_DESCRIPTION=API for managing restaurant inventory
      - DEBUG=True
      - DB_ECHO=True
      - KAFKA_INVENTORY_TOPIC=restaurant.inventory
      - KAFKA_CLIENT_ID=inventory-service
      - KAFKA_GROUP_ID=inventory-service-group
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
      - API_PREFIX=/api/v1
    depends_on:
      - kafka1
    networks:
      - backend-network

  order-consumer:
    image: adrielmachado0111/order-consumer:latest
    env_file:
      - .env
    container_name: order-consumer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka1:19092
      - KAFKA_TOPIC=restaurant.orders
      - KAFKA_GROUP_ID=restaurant-order-consumer
      - KAFKA_AUTO_OFFSET_RESET=earliest
      - LOG_LEVEL=INFO
      
    depends_on:
      - kafka1
      - zoo1
    restart: unless-stopped
    networks:
      - backend-network

  zoo1:
    image: confluentinc/cp-zookeeper:7.8.0
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - backend-network

  kafka1:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - backend-network

  cloudflared:
   container_name: tunnel
   env_file:
     - .env
   image: cloudflare/cloudflared:latest
   command: tunnel --no-autoupdate run --token ${CLOUDFLARED_TOKEN}
   networks:
     - backend-network
  

volumes:
  kafka-data:

networks:
  backend-network:
    driver: bridge